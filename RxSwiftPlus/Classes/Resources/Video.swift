// Generated by Khrysalis Swift converter - this file will be overwritten.
// File: Video.kt
// Package: com.lightningkite.butterfly
import UIKit
import RxSwift
import AVKit

public enum VideoLoadError: Error {
    case requestError
    case notImage
}

public protocol Video {}
public struct VideoLocalUrl: Video, Hashable {
    var url: URL
    public init(_ url: URL) { self.url = url }
}
public struct VideoRemoteUrl: Video, Hashable {
    var url: URL
    public init(_ url: URL) { self.url = url }
}

public extension Video {
    func thumbnail(timeMs: Int = 2000, size: CGPoint? = nil) -> Single<Image> {
        return Single.create { (em: SingleEmitter<Image>) in
            let vid: AVAsset
            switch self {
            case let self as VideoLocalUrl:
                vid = AVAsset(url: self.url)
            case let self as VideoRemoteUrl:
                vid = AVAsset(url: self.url)
            default:
                fatalError()
            }
            let imageGenerator = AVAssetImageGenerator(asset: vid)
            imageGenerator.appliesPreferredTrackTransform = true
            let time = CMTime(seconds: Double(timeMs) / 1000.0, preferredTimescale: 600)
            let times = [NSValue(time: time)]
            imageGenerator.generateCGImagesAsynchronously(forTimes: times, completionHandler: { _, image, _, _, _ in
                if let image = image {
                    em.on(.success(ImageUI(UIImage(cgImage: image))))
                } else {
                    em.on(.failure(VideoLoadError.requestError))
                }
            })
        }.subscribe(on: ConcurrentDispatchQueueScheduler(qos: .background)).observe(on: MainScheduler.instance)
    }
}

public extension VCContainerView {
    func setVideo(_ video: Video, playWhenReady: Bool = false){
        if let controller = self.contained as? AVPlayerViewController {
            controller.setVideo(video, playWhenReady: playWhenReady)
        } else {
            let controller = AVPlayerViewController()
            self.contained = controller
            controller.setVideo(video, playWhenReady: playWhenReady)
        }
    }
}
public extension AVPlayerViewController {
    func setVideo(_ video: Video, playWhenReady: Bool = false){
        var player: AVPlayer;
        switch video {
        case let self as VideoLocalUrl:
            player = AVPlayer(url: self.url)
        case let self as VideoRemoteUrl:
            player = AVPlayer(url: self.url)
        default:
            fatalError()
        }
        self.player = player
        if playWhenReady {
            player.play()
        }
    }
}
